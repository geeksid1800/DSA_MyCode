/*
1) Create an empty stack S.
2) Initialize current node as root
3) Push the current node to S and set current = current->left until current is NULL
4) If current is NULL and stack is not empty then 
     a) Pop the top item from stack.
     b) Print the popped item, set current = popped_item->right 
     c) Go to step 3.
5) If current is NULL and stack is empty then we are done
*/

/**
 * Definition for binary tree
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
 
 
vector<int> Solution::inorderTraversal(TreeNode* rootPtr) {
    stack<TreeNode*> stk;
    vector<int> ans;
    
    if(rootPtr == NULL) return ans;
    
    TreeNode* curr= rootPtr->left;
    stk.push(rootPtr);
    while(!stk.empty() || curr != NULL){
        while(curr != NULL){
            stk.push(curr);
            curr=curr->left;
        }
        TreeNode* temp=stk.top();   
        stk.pop();
        ans.push_back(temp->val);
        curr=temp->right;
    }
    return ans;
}
